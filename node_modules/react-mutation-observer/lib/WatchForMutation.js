(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', 'react', 'prop-types', 'core-decorators', 'lodash.omit', './withObserver'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('react'), require('prop-types'), require('core-decorators'), require('lodash.omit'), require('./withObserver'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.React, global.propTypes, global.coreDecorators, global.lodash, global.withObserver);
    global.WatchForMutation = mod.exports;
  }
})(this, function (exports, _react, _propTypes, _coreDecorators, _lodash, _withObserver) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _lodash2 = _interopRequireDefault(_lodash);

  var _withObserver2 = _interopRequireDefault(_withObserver);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  function _objectWithoutProperties(obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var _class, _class2, _temp;

  var WatchForMutation = (0, _coreDecorators.autobind)(_class = (_temp = _class2 = function (_Component) {
    _inherits(WatchForMutation, _Component);

    function WatchForMutation(props, categories) {
      var omitList = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var observedComponent = arguments[3];

      _classCallCheck(this, WatchForMutation);

      var _this = _possibleConstructorReturn(this, (WatchForMutation.__proto__ || Object.getPrototypeOf(WatchForMutation)).call(this, props));

      _this.categories = categories;
      _this.omitList = omitList;
      _this.observedComponent = observedComponent;
      return _this;
    }

    _createClass(WatchForMutation, [{
      key: 'handleMutation',
      value: function handleMutation(type, data) {
        console.log('Mutation triggered: ' + type, data);
      }
    }, {
      key: 'render',
      value: function render() {
        var _props = this.props,
            children = _props.children,
            component = _props.component,
            subtree = _props.subtree,
            rest = _objectWithoutProperties(_props, ['children', 'component', 'subtree']);

        var props = (0, _lodash2.default)(rest, this.omitList);
        var toBeWrapped = void 0;
        if (_react.Children.count(children)) {
          toBeWrapped = _react.Children.only(children);
        } else {
          if (!component) {
            throw new Error('WatchForRemove: A child or a component has to be passed in.');
          }
          toBeWrapped = component;
        }
        var Component = (0, _withObserver2.default)(toBeWrapped);
        return _react2.default.createElement(Component, _extends({
          observedComponent: this.observedComponent,
          onMutation: this.handleMutation,
          categories: this.categories,
          subtree: subtree
        }, props));
      }
    }]);

    return WatchForMutation;
  }(_react.Component), _class2.displayName = 'WatchForMutation', _class2.propTypes = {
    children: _propTypes2.default.element,
    component: _propTypes2.default.element,
    subtree: _propTypes2.default.bool.isRequired
  }, _class2.defaultProps = {
    subtree: false
  }, _temp)) || _class;

  exports.default = WatchForMutation;
});