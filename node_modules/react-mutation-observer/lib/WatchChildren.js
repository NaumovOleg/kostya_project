(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', 'react', 'prop-types', 'core-decorators', './WatchForMutation', './withObserver'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('react'), require('prop-types'), require('core-decorators'), require('./WatchForMutation'), require('./withObserver'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.React, global.propTypes, global.coreDecorators, global.WatchForMutation, global.withObserver);
    global.WatchChildren = mod.exports;
  }
})(this, function (exports, _react, _propTypes, _coreDecorators, _WatchForMutation2, _withObserver) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _WatchForMutation3 = _interopRequireDefault(_WatchForMutation2);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var _class, _class2, _temp;

  var WatchChildren = (0, _coreDecorators.autobind)(_class = (_temp = _class2 = function (_WatchForMutation) {
    _inherits(WatchChildren, _WatchForMutation);

    function WatchChildren(props) {
      _classCallCheck(this, WatchChildren);

      return _possibleConstructorReturn(this, (WatchChildren.__proto__ || Object.getPrototypeOf(WatchChildren)).call(this, props, _withObserver.CHILD_LIST, ['onRemoval', 'onAddition']));
    }

    _createClass(WatchChildren, [{
      key: 'handleMutation',
      value: function handleMutation(type, payload) {
        if (type === _withObserver.CHILD_REMOVED) {
          this.props.onRemoval(payload);
        }
        if (type === _withObserver.CHILD_ADDED) {
          this.props.onAddition(payload);
        }
      }
    }]);

    return WatchChildren;
  }(_WatchForMutation3.default), _class2.displayName = 'WatchChildren', _class2.propTypes = _extends({}, _WatchForMutation3.default.propTypes, {
    onRemoval: _propTypes2.default.func.isRequired,
    onAddition: _propTypes2.default.func.isRequired
  }), _class2.defaultProps = {
    subtree: true,
    onRemoval: function onRemoval() {},
    onAddition: function onAddition() {}
  }, _temp)) || _class;

  exports.default = WatchChildren;
});