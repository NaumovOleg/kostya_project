(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', 'react', 'react-dom', 'prop-types', 'memoizerific', 'lodash.omit', 'lodash.isequal', 'core-decorators'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('react'), require('react-dom'), require('prop-types'), require('memoizerific'), require('lodash.omit'), require('lodash.isequal'), require('core-decorators'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.React, global.reactDom, global.propTypes, global.memoizerific, global.lodash, global.lodash, global.coreDecorators);
    global.withObserver = mod.exports;
  }
})(this, function (exports, _react, _reactDom, _propTypes, _memoizerific, _lodash, _lodash3, _coreDecorators) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ALL_CATEGORIES = exports.CHARACTER_DATA = exports.CHILD_REMOVED = exports.CHILD_ADDED = exports.ATTRIBUTES = exports.CHILD_LIST = undefined;
  exports.default = withObserver;

  var _react2 = _interopRequireDefault(_react);

  var _reactDom2 = _interopRequireDefault(_reactDom);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _memoizerific2 = _interopRequireDefault(_memoizerific);

  var _lodash2 = _interopRequireDefault(_lodash);

  var _lodash4 = _interopRequireDefault(_lodash3);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function (key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;

    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }

    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);

    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }

    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }

    return desc;
  }

  var MutationObserver = window.MutationObserver;

  var CHILD_LIST = exports.CHILD_LIST = 'childList';
  var ATTRIBUTES = exports.ATTRIBUTES = 'attributes';
  var CHILD_ADDED = exports.CHILD_ADDED = 'childAdded';
  var CHILD_REMOVED = exports.CHILD_REMOVED = 'childRemoved';
  var CHARACTER_DATA = exports.CHARACTER_DATA = 'characterData';
  var ALL_CATEGORIES = exports.ALL_CATEGORIES = 'ALL_CATEGORIES';

  var oneOf = _propTypes2.default.oneOf([CHILD_LIST, ATTRIBUTES, CHARACTER_DATA, ALL_CATEGORIES]);

  function withObserver(Wrapped) {
    var _dec, _class, _desc, _value, _class2, _class3, _temp;

    var name = Wrapped.name || Wrapped.displayName || Wrapped.type || 'Anonymous';

    var Wrapper = (_dec = (0, _coreDecorators.decorate)((0, _memoizerific2.default)(25)), (0, _coreDecorators.autobind)(_class = (_class2 = (_temp = _class3 = function (_Component) {
      _inherits(Wrapper, _Component);

      function Wrapper(props) {
        _classCallCheck(this, Wrapper);

        var _this = _possibleConstructorReturn(this, (Wrapper.__proto__ || Object.getPrototypeOf(Wrapper)).call(this, props));

        _this.observer = null;
        return _this;
      }

      /* Life Cycle Methods */


      _createClass(Wrapper, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
          this.buildObserver();
        }
      }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
          this.connectObserver();
        }
      }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
          if (this.observer !== null && typeof this.node !== 'undefined') {
            var changesObserver = (0, _lodash2.default)(Wrapper.propTypes, 'onMutation');
            var observerNeedsUpdate = false;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = changesObserver[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var key = _step.value;

                if (!(0, _lodash4.default)(this.props[key], nextProps[key])) {
                  observerNeedsUpdate = true;
                  break;
                }
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            if (observerNeedsUpdate) {
              this.buildObserver();
              this.connectObserver();
            }
          }
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          if (this.observer !== null) {
            this.observer.disconnect();
            this.observer = null;
          }
        }
      }, {
        key: 'handleAttributes',
        value: function handleAttributes(_ref) {
          var oldValue = _ref.oldValue,
              target = _ref.target,
              attributeName = _ref.attributeName,
              attributeNamespace = _ref.attributeNamespace;

          var res = {
            from: oldValue,
            name: attributeName,
            namespace: attributeNamespace,
            target: target
          };
          res.to = target.getAttribute(attributeName);
          this.props.onMutation(ATTRIBUTES, res);
        }
      }, {
        key: 'handleCharacterData',
        value: function handleCharacterData(_ref2) {
          var oldValue = _ref2.oldValue,
              target = _ref2.target;

          var res = {
            from: oldValue,
            to: target.data,
            target: target
          };
          this.props.onMutation(CHARACTER_DATA, res);
        }
      }, {
        key: 'handleChildList',
        value: function handleChildList(_ref3) {
          var _this2 = this;

          var target = _ref3.target,
              addedNodes = _ref3.addedNodes,
              removedNodes = _ref3.removedNodes,
              previousSibling = _ref3.previousSibling,
              nextSibling = _ref3.nextSibling;

          var res = {
            target: target,
            previousSibling: previousSibling,
            nextSibling: nextSibling,
            wrappedNode: this.node
          };
          if (addedNodes.length > 0) {
            addedNodes.forEach(function (child) {
              _this2.props.onMutation(CHILD_ADDED, _extends({}, res, { child: child }));
            });
          }
          if (removedNodes.length > 0) {
            removedNodes.forEach(function (child) {
              _this2.props.onMutation(CHILD_REMOVED, _extends({}, res, { child: child }));
            });
          }
        }
      }, {
        key: 'mutationReducer',
        value: function mutationReducer(type, payload) {
          switch (type) {
            case ATTRIBUTES:
              return this.handleAttributes(payload);
            case CHARACTER_DATA:
              return this.handleCharacterData(payload);
            case CHILD_LIST:
              return this.handleChildList(payload);
          }
        }
      }, {
        key: 'buildObserver',
        value: function buildObserver() {
          var _this3 = this;

          if (this.observer !== null) {
            this.observer.disconnect();
          }
          this.observer = new MutationObserver(function (mutations) {
            mutations.forEach(function (data) {
              _this3.mutationReducer(data.type, data);
            });
          });
        }
      }, {
        key: 'buildConfig',
        value: function buildConfig(subtree, categories, attributeList, suppressAttributeOldValue, suppressCharacterDataOldValue) {
          var cats = categories;
          if (typeof categories === 'string') {
            cats = [categories];
          }
          if (cats.indexOf(ALL_CATEGORIES) > -1) {
            cats = [CHILD_LIST, ATTRIBUTES, CHARACTER_DATA];
          }
          var config = {};
          if (subtree) {
            config.subtree = subtree;
          }
          if (!suppressAttributeOldValue && cats.indexOf(ATTRIBUTES) > -1) {
            config.attributeOldValue = true;
          }
          if (!suppressCharacterDataOldValue && cats.indexOf(CHARACTER_DATA) > -1) {
            config.characterDataOldValue = true;
          }
          if (attributeList.length > 0 && cats.indexOf(ATTRIBUTES) > -1) {
            config.attributeFilter = attributeList;
          }
          if (cats.length === 0) {
            config.childList = true;
          } else {
            cats.forEach(function (key) {
              config[key] = true;
            });
          }
          return config;
        }
      }, {
        key: 'connectObserver',
        value: function connectObserver() {
          var _props = this.props,
              subtree = _props.subtree,
              categories = _props.categories,
              attributeList = _props.attributeList,
              observedComponent = _props.observedComponent,
              suppressAttributeOldValue = _props.suppressAttributeOldValue,
              suppressCharacterDataOldValue = _props.suppressCharacterDataOldValue;

          var config = this.buildConfig(subtree, categories, attributeList, suppressAttributeOldValue, suppressCharacterDataOldValue);

          this.observer.observe(observedComponent(this.node), config);
        }
      }, {
        key: 'handleRef',
        value: function handleRef(node) {
          if (typeof Wrapped.type === 'function') {
            this.node = _reactDom2.default.findDOMNode(node);
          } else {
            this.node = node;
          }
        }
      }, {
        key: 'render',
        value: function render() {
          var props = (0, _lodash2.default)(this.props, Object.keys(Wrapper.propTypes));

          if ((typeof Wrapped === 'undefined' ? 'undefined' : _typeof(Wrapped)) === 'object') {
            return (0, _react.cloneElement)(Wrapped, _extends({}, props, { ref: this.handleRef }));
          }
          return _react2.default.createElement(Wrapped, _extends({}, props, { ref: this.handleRef }));
        }
      }]);

      return Wrapper;
    }(_react.Component), _class3.displayName = 'MutationObserver(' + name + ')', _class3.propTypes = {
      observedComponent: _propTypes2.default.func.isRequired,
      categories: _propTypes2.default.oneOfType([oneOf, _propTypes2.default.arrayOf(oneOf)]).isRequired,
      attributeList: _propTypes2.default.arrayOf(_propTypes2.default.string).isRequired,
      subtree: _propTypes2.default.bool.isRequired,
      suppressAttributeOldValue: _propTypes2.default.bool.isRequired,
      suppressCharacterDataOldValue: _propTypes2.default.bool.isRequired,
      onMutation: _propTypes2.default.func.isRequired
    }, _class3.defaultProps = {
      observedComponent: function observedComponent(i) {
        return i;
      },
      categories: [],
      attributeList: [],
      subtree: false,
      suppressAttributeOldValue: false,
      suppressCharacterDataOldValue: false
    }, _temp), (_applyDecoratedDescriptor(_class2.prototype, 'buildConfig', [_dec], Object.getOwnPropertyDescriptor(_class2.prototype, 'buildConfig'), _class2.prototype)), _class2)) || _class);


    return Wrapper;
  }
});